package bitwise_ops;

public class BitwiseOpsDemo {
	
	/*
	 * Practice with bitwise operators
	 */
	
	public static void main(String[] args) {
		
		BitwiseOpsDemo bits = new BitwiseOpsDemo();
		bits.and();
		bits.or();
		bits.complement();
		bits.xor();
		bits.leftShiftOnce();
		bits.leftShiftTwice();
		bits.rightShift();
		bits.rightShiftUnsigned();
		
	}
	
	int x = 5;
	int y = 3;
	
	 // & AND
	public void and() {
		int a = x & y;
		System.out.println( x + "&" + y + " = " + a);
	}
	
	 // | bitwise inclusive OR
		public void or() {
			int b = x | y;
			System.out.println( x + "|" + y + " = " + b);
	}
	
	 // ~ bitwise complement
		public void complement() {
			int c = ~x;
			System.out.println( "~" + x + " = " + c);
	}
	
	 // ^ bitwise exclusive OR , XOR
		public void xor() {
			int d = x ^ y;
			System.out.println( x + "^" + y + " = " + d);
	}
	
	 // << left shift
		public void leftShiftOnce() {
			int e = x << 1;
			System.out.println( x + " shifted to the left once is " + e);
	}
		
		public void leftShiftTwice() {
			int f = x << 2;
			System.out.println( x + " shifted to the left twice is " + f);
	}
	
	 // >> right shift
		public void rightShift() {
			int g = x >> 1;
			System.out.println( x + " shifted to the right once is " + g);
	}
	
	 // >>> unsigned right shift
		public void rightShiftUnsigned() {
			int h = x >>> 1;
			System.out.println( x + " shifted to the right is " + h);
	}

}
